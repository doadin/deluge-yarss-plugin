# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[flake8]
max-line-length = 120
builtins = _,__request__
ignore =
       E133
       W503 # line break abefore binary operator.
exclude = .tox,.git,dist,build,yarss2/lib,yarss2/include,install

[tox]
envlist = pydef, trial, flake8, flake8-complexity, isort, testcoverage, testcoverage-html
minversion = 1.8
skipsdist = true

[testenv]
passenv = DISPLAY
setenv = PYTHONPATH = {env:PWD}:{env:PYTHONPATH}
sitepackages = false
basepython = python3
deps =
    twisted
    service_identity
    mako
    chardet
    pyopenssl
    pyxdg
    pytest
    pytest-twisted
whitelist_externals = pytest
install_command = pip install {opts} {packages}
commands = {envpython} setup.py test

[pytest]
python_functions = test_
norecursedirs = .tox .git dist build
pep8maxlinelength = 120
whitelist_externals= {[testenv]whitelist_externals}
commands = py.test yarss2
markers =
    label: Test GTKUI with label plugin

##############
# Unit tests
##############

[testenv:pydef]
commands =
    pytest -v -s --reactor=default -m "not label" yarss2/tests

[testenv:all]
commands =
    pytest -v -s --reactor=default yarss2/tests

[testenv:todo]
commands =
    pytest -v -s --reactor=default -m "todo" yarss2/tests

[testenv:trial]
whitelist_externals = trial
commands =
    trial yarss2/tests

[testenv:py26]
basepython = python2.6
commands = {[testenv:pydef]commands}

[testenv:py27]
basepython = python2.7
commands = {[testenv:pydef]commands}


###########################
# Code style verification
###########################

[testenv:isort]
deps =
    {[testenv]deps}
    isort
    pytest-isort
whitelist_externals =
    {[testenv]whitelist_externals}
    isort
commands = python -c "import subprocess, sys; output = subprocess.check_output('isort -q --stdout --diff yarss2/*.py yarss2/util/*.py *.py', shell=True); print output; sys.exit(len(output) != 0)"

[testenv:flake8]
setenv = {[testenv]setenv}
whitelist_externals =
    {[testenv]whitelist_externals}
    flake8
deps =
    {[testenv]deps}
    flake8
    pep8-naming
commands =
    flake8 --version
    flake8

[testenv:flake8-complexity]
setenv = {[testenv]setenv}
whitelist_externals =
    {[testenv]whitelist_externals}
    flake8
    sh
deps =
    {[testenv]deps}
    flake8
    mccabe
commands =
    flake8 --version
    flake8 --exit-zero --max-complexity 15 yarss2

######################
# Unit Test coverage
######################

[testcoveragebase]
deps =
    {[testenv]deps}
    pytest-cov
    coverage
whitelist_externals =
    {[testenv]whitelist_externals}
    coverage
commands =
    coverage run --branch --source=yarss2 -m py.test --twisted -m "not todo" yarss2/tests/

[testenv:testcoverage]
deps = {[testcoveragebase]deps}
setenv = {[testenv]setenv}
whitelist_externals = {[testcoveragebase]whitelist_externals}
commands =
    {[testcoveragebase]commands}
    coverage report

[testenv:testcoverage-html]
deps = {[testcoveragebase]deps}
setenv = {[testenv]setenv}
whitelist_externals = {[testcoveragebase]whitelist_externals}
commands =
    {[testcoveragebase]commands}
    coverage html -d docs/build/htmlcoverage
